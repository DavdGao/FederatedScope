# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: sqlschedule.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='sqlschedule.proto',
  package='',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n\x11sqlschedule.proto\"_\n\nExpression\x12\x10\n\x08operator\x18\x01 \x01(\t\x12\x1c\n\x07\x65lement\x18\x02 \x03(\x0b\x32\x0b.Expression\x12\x0b\n\x01i\x18\x03 \x01(\x03H\x00\x12\x0b\n\x01s\x18\x04 \x01(\tH\x00\x42\x07\n\x05value\"\xa4\x01\n\rBasicSchedule\x12\x1f\n\nexp_select\x18\x01 \x01(\x0b\x32\x0b.Expression\x12\x12\n\ntable_name\x18\x02 \x01(\t\x12\x1e\n\texp_where\x18\x03 \x03(\x0b\x32\x0b.Expression\x12\x1c\n\x07\x65xp_agg\x18\x04 \x03(\x0b\x32\x0b.Expression\x12 \n\x08\x63hildren\x18\x05 \x03(\x0b\x32\x0e.BasicSchedule*$\n\rAttributeType\x12\x07\n\x03INT\x10\x00\x12\n\n\x06STRING\x10\x01*7\n\x08Operator\x12\x07\n\x03REF\x10\x00\x12\x06\n\x02GE\x10\x01\x12\x06\n\x02LE\x10\x02\x12\t\n\x05\x43OUNT\x10\x64\x12\x07\n\x03SUM\x10\x65\x62\x06proto3')
)

_ATTRIBUTETYPE = _descriptor.EnumDescriptor(
  name='AttributeType',
  full_name='AttributeType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='INT', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='STRING', index=1, number=1,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=285,
  serialized_end=321,
)
_sym_db.RegisterEnumDescriptor(_ATTRIBUTETYPE)

AttributeType = enum_type_wrapper.EnumTypeWrapper(_ATTRIBUTETYPE)
_OPERATOR = _descriptor.EnumDescriptor(
  name='Operator',
  full_name='Operator',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='REF', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GE', index=1, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='LE', index=2, number=2,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='COUNT', index=3, number=100,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SUM', index=4, number=101,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=323,
  serialized_end=378,
)
_sym_db.RegisterEnumDescriptor(_OPERATOR)

Operator = enum_type_wrapper.EnumTypeWrapper(_OPERATOR)
INT = 0
STRING = 1
REF = 0
GE = 1
LE = 2
COUNT = 100
SUM = 101



_EXPRESSION = _descriptor.Descriptor(
  name='Expression',
  full_name='Expression',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='operator', full_name='Expression.operator', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='element', full_name='Expression.element', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='i', full_name='Expression.i', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='s', full_name='Expression.s', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='value', full_name='Expression.value',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=21,
  serialized_end=116,
)


_BASICSCHEDULE = _descriptor.Descriptor(
  name='BasicSchedule',
  full_name='BasicSchedule',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='exp_select', full_name='BasicSchedule.exp_select', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='table_name', full_name='BasicSchedule.table_name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='exp_where', full_name='BasicSchedule.exp_where', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='exp_agg', full_name='BasicSchedule.exp_agg', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='children', full_name='BasicSchedule.children', index=4,
      number=5, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=119,
  serialized_end=283,
)

_EXPRESSION.fields_by_name['element'].message_type = _EXPRESSION
_EXPRESSION.oneofs_by_name['value'].fields.append(
  _EXPRESSION.fields_by_name['i'])
_EXPRESSION.fields_by_name['i'].containing_oneof = _EXPRESSION.oneofs_by_name['value']
_EXPRESSION.oneofs_by_name['value'].fields.append(
  _EXPRESSION.fields_by_name['s'])
_EXPRESSION.fields_by_name['s'].containing_oneof = _EXPRESSION.oneofs_by_name['value']
_BASICSCHEDULE.fields_by_name['exp_select'].message_type = _EXPRESSION
_BASICSCHEDULE.fields_by_name['exp_where'].message_type = _EXPRESSION
_BASICSCHEDULE.fields_by_name['exp_agg'].message_type = _EXPRESSION
_BASICSCHEDULE.fields_by_name['children'].message_type = _BASICSCHEDULE
DESCRIPTOR.message_types_by_name['Expression'] = _EXPRESSION
DESCRIPTOR.message_types_by_name['BasicSchedule'] = _BASICSCHEDULE
DESCRIPTOR.enum_types_by_name['AttributeType'] = _ATTRIBUTETYPE
DESCRIPTOR.enum_types_by_name['Operator'] = _OPERATOR
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Expression = _reflection.GeneratedProtocolMessageType('Expression', (_message.Message,), dict(
  DESCRIPTOR = _EXPRESSION,
  __module__ = 'sqlschedule_pb2'
  # @@protoc_insertion_point(class_scope:Expression)
  ))
_sym_db.RegisterMessage(Expression)

BasicSchedule = _reflection.GeneratedProtocolMessageType('BasicSchedule', (_message.Message,), dict(
  DESCRIPTOR = _BASICSCHEDULE,
  __module__ = 'sqlschedule_pb2'
  # @@protoc_insertion_point(class_scope:BasicSchedule)
  ))
_sym_db.RegisterMessage(BasicSchedule)


# @@protoc_insertion_point(module_scope)
